name: Create Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get changelog version
        id: changelog_version
        run: |
          # Extract latest version from changelog (newest first)
          if [[ -f "changelog/CHANGELOG.md" ]]; then
            CHANGELOG_VERSION=$(grep -m 1 "^## v" changelog/CHANGELOG.md | sed 's/^## v\([0-9.]*\).*/\1/')
            if [[ -z "$CHANGELOG_VERSION" ]]; then
              CHANGELOG_VERSION="0.1.0"
            fi
          else
            CHANGELOG_VERSION="0.1.0"
          fi
          echo "version=$CHANGELOG_VERSION" >> $GITHUB_OUTPUT
          echo "Changelog version: $CHANGELOG_VERSION"

      - name: Check if tag exists and calculate release version
        id: release_version
        run: |
          CHANGELOG_VERSION="${{ steps.changelog_version.outputs.version }}"
          
          # Check if tag already exists
          if git rev-parse "v$CHANGELOG_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CHANGELOG_VERSION already exists, incrementing patch version"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CHANGELOG_VERSION"
            PATCH=$((PATCH + 1))
            RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"
          else
            echo "Using changelog version: $CHANGELOG_VERSION"
            RELEASE_VERSION="$CHANGELOG_VERSION"
          fi
          
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $RELEASE_VERSION"

      - name: Update changelog (if needed)
        run: |
          RELEASE_VERSION="${{ steps.release_version.outputs.version }}"
          CHANGELOG_VERSION="${{ steps.changelog_version.outputs.version }}"
          
          # Only update changelog if we're incrementing from an existing tag
          if [[ "$RELEASE_VERSION" != "$CHANGELOG_VERSION" ]]; then
            echo "Updating changelog for incremented version $RELEASE_VERSION"
            
            NEW_ENTRY="## v$RELEASE_VERSION â€” $(date '+%B %d, %Y')\n\n- Patch version update\n\n"
            
            # Insert new entry at the top (after header)
            sed -i "2i\\$NEW_ENTRY" changelog/CHANGELOG.md
            
            git add changelog/CHANGELOG.md
            git commit -m "chore: release v$RELEASE_VERSION"
            git push origin main
          else
            echo "Using existing changelog entry for version $RELEASE_VERSION"
          fi

      - name: Create Git tag
        run: |
          RELEASE_VERSION="${{ steps.release_version.outputs.version }}"
          git tag -a "v$RELEASE_VERSION" -m "Release v$RELEASE_VERSION"
          git push origin "v$RELEASE_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          RELEASE_VERSION="${{ steps.release_version.outputs.version }}"
          
          # Extract changes for this version from changelog
          RELEASE_NOTES=$(sed -n "/^## v$RELEASE_VERSION/,/^## v/p" changelog/CHANGELOG.md | sed '$d' | sed '/^[[:space:]]*$/d')
          
          if [[ -z "$RELEASE_NOTES" ]]; then
            RELEASE_NOTES="No notes for v$RELEASE_VERSION"
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release_version.outputs.version }}
          name: v${{ steps.release_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false